// lib/chat_page.dart
import 'dart:async';

import 'package:flutter/material.dart';
import 'package:portolines_offline/services/api_service.dart';
class ChatPage extends StatefulWidget {
  const ChatPage({Key? key}) : super(key: key);

  @override
  _ChatPageState createState() => _ChatPageState();
}

class _ChatPageState extends State<ChatPage> {
  final TextEditingController _controller = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  List<String> _messages = [];
  bool _isLoading = false;
  String _currentAiResponse = '';

  Future<void> _sendMessage() async {
    final inputText = _controller.text.trim();
    if (inputText.isEmpty) return;

    setState(() {
      _messages.add('Voc√™: $inputText');
      _messages.add('Porto Lines: ');
      _isLoading = true;
    });

    _controller.clear();
    _scrollToBottom();

    final fullPrompt = '''Voc√™ √© o Porto Lines, um sistema de informa√ß√£o e assist√™ncia √† mobilidade urbana no Porto, Portugal.
Seu papel √© fornecer orienta√ß√µes detalhadas e precisas sobre as melhores op√ß√µes de transporte p√∫blico para estudantes se deslocarem entre diferentes localidades da cidade.
Quando algu√©m busca assist√™ncia, utilize sempre os termo "Ol√°! Irei te ajudar agora..." Evite qualquer pronome de g√™nero (como "ele" ou "ela") e termos que impliquem uma rela√ß√£o comercial (como "cliente").
Mantenha uma linguagem emp√°tica e focada no bem-estar e na conveni√™ncia de quem precisa de ajuda.
O contacto com as autoridades de transporte p√∫blico (STCP, Metro do Porto, etc.) Responda sempre o que lhe foi solicitado local: ex: onde est√° em uma paragem de autocarros e para onde vai, n√£o fa√ßa perguntas como n√∫mero do local ou algo que n√£o foi pedido.
Responda unicamente a perguntas relacionadas a op√ß√µes de transporte p√∫blico, hor√°rios, rotas e acessibilidade no Porto, utilizando o portugu√™s de Portugal de forma clara e objetiva.
Sua prioridade √© auxiliar da melhor forma poss√≠vel, mantendo a neutralidade de g√™nero e a natureza assistencial do seu papel em um contexto de mobilidade urbana.
Quando solicitado para fornecer rotas, inclua informa√ß√µes detalhadas, tais como:
* N√∫meros de autocarro e respetivas rotas.
* Linhas de metro e esta√ß√µes relevantes.
* Comboios urbanos e esta√ß√µes de transfer√™ncia.
* Outras alternativas de transporte (el√©ctricos, etc.).
* Hor√°rios de partida e chegada nos locais especificados.
* Informa√ß√µes sobre transfer√™ncias necess√°rias
* Informe todos os links e contatos reais de telefones do STCP, Metro do Porto, CP ‚Äì Comboios de Portugal

[Aten√ß√£o]

* Voc√™ n√£o pode fazer perguntas sobre qual local voc√™ est√° uma vez que a pessoa j√° informou.


üí¨ Comunica√ß√£o:

- Utilize linguagem clara, objetiva e emp√°tica.
- Mantenha neutralidade de g√©nero e tom acolhedor.
- Foque no bem-estar, comodidade e autonomia de quem busca assist√™ncia.

üöå Suas responsabilidades:

Responda somente a perguntas relacionadas a transporte p√∫blico no Porto, incluindo:
- Autocarros (STCP): n√∫meros, hor√°rios e rotas.
- Metro do Porto: linhas, esta√ß√µes e hor√°rios.
- Comboios urbanos (CP): esta√ß√µes e transfer√™ncias.
- El√©ctricos e transportes alternativos.
- Integra√ß√£o entre meios de transporte.
- Acessibilidade e op√ß√µes inclusivas.

Quando solicitado para fornecer rotas, inclua:
- Linhas e n√∫meros dos transportes.
- Esta√ß√µes e paragens principais.
- Hor√°rios de partida e chegada.
- Informa√ß√£o sobre transbordos.
- Dura√ß√£o aproximada da viagem.

‚ö†Ô∏è Importante:

Para quest√µes mais complexas ou emergenciais, oriente a pessoa a contactar diretamente as autoridades respons√°veis:
STCP, Metro do Porto, CP ‚Äì Comboios de Portugal, ou o site oficial da C√¢mara Municipal do Porto.

Pergunta do utilizador: $inputText
''';

    try {
      // Chama a fun√ß√£o da API com o prompt personalizado
      String response = await getGemmaResponse(fullPrompt);

      // Adiciona a sauda√ß√£o em portugu√™s antes da resposta da IA
      String responseWithGreeting = "Ol√°! Irei te ajudar agora.\n\n$response";

      // Inicia o efeito de digita√ß√£o
      _startAiTypingEffect(responseWithGreeting);
    } catch (e) {
      setState(() {
        _isLoading = false;
        _messages[_messages.length - 1] = 'Porto Lines: Erro ao obter resposta.';
      });
      print('Erro ao obter resposta da API: $e');
    }
  }

  Future<void> _startAiTypingEffect(String fullResponse) async {
    _currentAiResponse = '';
    for (int i = 0; i < fullResponse.length; i++) {
      await Future.delayed(const Duration(milliseconds: 30));
      setState(() {
        _currentAiResponse += fullResponse[i];
        _messages[_messages.length - 1] = 'Porto Lines: $_currentAiResponse';
      });
      _scrollToBottom();
    }
    setState(() {
      _isLoading = false;
    });
  }

  void _scrollToBottom() {
    _scrollController.animateTo(
      _scrollController.position.maxScrollExtent,
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeOut,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Porto Lines - Chat com AI Gemma3'),
        backgroundColor: Colors.deepPurple.shade800,
      ),
      backgroundColor: const Color(0xFF190B37),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              controller: _scrollController,
              padding: const EdgeInsets.all(8),
              itemCount: _messages.length,
              itemBuilder: (context, index) {
                return Container(
                  margin: const EdgeInsets.symmetric(vertical: 4),
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: _messages[index].startsWith('Voc√™:')
                        ? Colors.deepPurple.shade600
                        : Colors.deepPurple.shade400,
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: Text(
                    _messages[index],
                    style: const TextStyle(color: Colors.white),
                  ),
                );
              },
            ),
          ),
          if (_isLoading)
            const Padding(
              padding: EdgeInsets.all(8.0),
              child: CircularProgressIndicator(),
            ),
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _controller,
                    style: const TextStyle(color: Colors.white),
                    decoration: InputDecoration(
                      labelText: 'Digite a sua pergunta...',
                      labelStyle: const TextStyle(color: Colors.white70),
                      filled: true,
                      fillColor: const Color(0xFF2D1B57),
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    onSubmitted: (_) => _sendMessage(),
                  ),
                ),
                const SizedBox(width: 8),
                IconButton(
                  icon: const Icon(Icons.send, color: Colors.white),
                  onPressed: _isLoading ? null : _sendMessage,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
